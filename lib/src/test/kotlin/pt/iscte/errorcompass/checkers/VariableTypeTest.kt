/*
 * This source file was generated by the Gradle 'init' task
 */
package pt.iscte.errorcompass.checkers

import pt.iscte.errorcompass.ErrorCompass
import kotlin.test.Test
import kotlin.test.assertEquals

class VariableTypeTest {
    @Test fun `test all cases from VariableTypeChecker in one class Java`() {
            val javaCode = """
            public class Main {
                public static void main(String[] args) {
                    int x = "Hello";
                    String y = 42;
                    String z = "World";
                    int a = 123;
                    Main m = new Main("Hello", 42);
                    m.someMethod(y,x);
                }
    
                public Main(int number, String text) {
                    // Construtor
                }
    
                public void someMethod(int param1, String param2) {
                    // Método
                }
            }
        """

            var errorCompasss = ErrorCompass()
            errorCompasss.run(javaCode).onSuccess {
                assertEquals(4, it.errors.count())
            }

    }

    @Test fun `Variable X with wrong type initializer`() {
        val javaCode = """
            public class Main {
                public static void main(String[] args) {
                    int x = "Hello"; 
                }
            }
        """

        var errorCompasss = ErrorCompass()
        errorCompasss.run(javaCode).onSuccess {
            assertEquals(it.errors.count(), 1)
            assertEquals("valTyp", it.errors.first().errorCode)
        }

    }

    @Test fun `Call a method with first parameter with the type incorrect, using a String in a Int parameter`() {
        val javaCode = """
            public class Main {
                public static void main(String[] args) {
                    someMethod("","");
                }
                
                public static void someMethod(int param1, String param2) {
                    // Método
                }
            }
        """

        var errorCompasss = ErrorCompass()

        val result = errorCompasss.run(javaCode)
        assertEquals(true, result.isSuccess)
        result.onSuccess {
            assertEquals(1, it.errors.count())
            assertEquals("calTyp", it.errors.first().errorCode)
        }
    }

    @Test fun `Using a custom type like a class to validate`() {
        val javaCode = """
            public class Main {
                public static void main(String[] args) {
                   Main main = new Main();
                }
            }
        """

        var errorCompasss = ErrorCompass()

        val result = errorCompasss.run(javaCode)
        assertEquals(true, result.isSuccess)
        result.onSuccess {
            assertEquals(0, it.errors.count())
        }
    }

    //TODO: Include more one test case to constructor
}
