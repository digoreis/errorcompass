/*
 * This source file was generated by the Gradle 'init' task
 */
package pt.iscte.errorcompass

import com.github.javaparser.JavaParser
import com.github.javaparser.ParserConfiguration
import com.github.javaparser.ast.CompilationUnit
import com.github.javaparser.symbolsolver.JavaSymbolSolver
import com.github.javaparser.symbolsolver.resolution.typesolvers.CombinedTypeSolver
import com.github.javaparser.symbolsolver.resolution.typesolvers.JavaParserTypeSolver
import com.github.javaparser.symbolsolver.resolution.typesolvers.ReflectionTypeSolver
import pt.iscte.errorcompass.checkers.*
import pt.iscte.errorcompass.generates.ErrorGenerator
import pt.iscte.errorcompass.model.ResultAnalyzer
import java.io.File
import java.nio.file.Paths

/**
 * ErrorCompass class provides methods to analyze Java code for potential errors.
 * It utilizes various checkers to inspect code quality and identify issues.
 */
class ErrorCompass() {
    /**
     * Runs the evaluation process on a string containing Java code.
     *
     * @param code The Java code as a string to be analyzed.
     * @return Result<ResultAnalyzer> containing the analysis result.
     */
    fun run(code: String): Result<ResultAnalyzer> {
        val typeSolver = CombinedTypeSolver()
        typeSolver.add(ReflectionTypeSolver())
        typeSolver.add(JavaParserTypeSolver(Paths.get(".")))
        val symbolSolver = JavaSymbolSolver(typeSolver)
        val parserConfiguration = ParserConfiguration()
        parserConfiguration.setSymbolResolver(symbolSolver)

        val cu: CompilationUnit = JavaParser(parserConfiguration).parse(code.trimIndent()).result.get()
        val variableTypeChecker = VariableTypeChecker(cu)
        val returnTypeChecker = MethodReturnChecker()
        val controlStructureChecker = ControlStructureChecker()
        val stringComparisonChecker = StringComparisonChecker()
        val uninitializedVariableChecker = UninitializedVariableChecker()
        //Execute Checker
        variableTypeChecker.visit(cu, null)
        returnTypeChecker.visit(cu, null)
        controlStructureChecker.visit(cu, null)
        stringComparisonChecker.visit(cu, null)
        uninitializedVariableChecker.visit(cu, null)

        val totalIssues = variableTypeChecker.issues + returnTypeChecker.issues + controlStructureChecker.issues + stringComparisonChecker.issues + uninitializedVariableChecker.issues
        val generator = ErrorGenerator()
        val errors = totalIssues.mapNotNull { generator.generate(it) }
        return Result.success(ResultAnalyzer(errors))
    }

    /**
     * Runs the evaluation process on a file containing Java code.
     *
     * @param file The File object representing the file to be analyzed.
     * @return Result<ResultAnalyzer> containing the analysis result.
     */
    fun run(file: File): Result<ResultAnalyzer> {
        return run(file.readText())
    }
}


